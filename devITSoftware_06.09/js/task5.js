/*
5. Написать обратный метод objectToArray, который из объекта создаст массив. Пример:

objectToArray({
	name: 'developer',
	age: 5,
	skills: {
		html: 4,
		css: 5,
		js: 5
	}
})

// Outputs: [['name', 'developer'], ['age', 5], ['skills', [['html', 4], ['css', 5], ['js', 5]]]
*/

function objectToArray(obj) {
    const result = [];  // Створюємо порожній масив для зберігання результату.
  
    for (const key in obj) {
      if (typeof obj[key] === 'object') {
        // Якщо значення ключа є об'єктом, викликаємо objectToArray рекурсивно для цього вкладеного обєкта.
        result.push([key, objectToArray(obj[key])]);
      } else {
        // Якщо значення ключа не є об'єктом, додаємо пару ключ-значення у масив.
        result.push([key, obj[key]]);
      }
    }
  
    return result;
}
  
const inputObject = {
    name: 'developer',
    age: 5,
    skills: {
      html: 4,
      css: 5,
      js: 5
    }
};

console.log(objectToArray(inputObject));

/* 
Для створення зворотнього методу objectToArray, який перетворить об'єкт у масив, 
можна використовувати рекурсію так само, як у завданні 4.

Спочатку створюю порожній масив result, в який будуть додаватися ключі та значення об'єкта.

Потім за допомогою циклу перебираю об'єкт на всі властивості.

Перевіряю чи є значення певної властивості обєктом. Якщо так, то викликаю функцію objectToArray рекурсивно для цього вкладеного об'єкта та додаю масив [key, objectToArray(obj[key])] у масив result, Це дозволить зберегти структуру вкладеності об'єктів у вихідному масиві.

Якщо значення ключа не є об'єктом, то просто додаю пару ключ-значення в масив.

В кінці повертаю сформований масив.
*/